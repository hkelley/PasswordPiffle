# Setup notes from CentOS deployment of CrackQ on Google cloud GPU host

sudo yum install git 
sudo yum install wget

# From https://cloud.google.com/compute/docs/gpus/install-drivers-gpu
# Download the installation script.
curl https://raw.githubusercontent.com/GoogleCloudPlatform/compute-gpu-installation/main/linux/install_gpu_driver.py --output install_gpu_driver.py

# Run the installation script.
sudo python3 install_gpu_driver.py

# Endure some wait and multiple restarts ......

# Verify GPU recognition
sudo nvidia-smi

# install Google's GPU-aware ops agent

# 
cd  /etc
git clone https://github.com/f0cker/crackq.git
cd crackq


# From https://github.com/f0cker/crackq/wiki/Install-on-CentOS

Setup Docker

Install Docker CE on CentOS

# the GPU driver install probably installed this already..
sudo yum install -y epel-release
sudo yum install -y yum-utils device-mapper-persistent-data lvm2

Add the Docker repo and install (or use other preferred install method):

sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install docker-ce docker-ce-cli containerd.io

NOTE: Nvidia runtime support is required, so this is the reason for using the latest version from the repo above. It's not supported in the version from the repo, at the time of writing. Same goes for docker-compose

Install docker-compose


# from https://docs.docker.com/compose/install/linux/#install-using-the-repository

sudo yum update
sudo yum install docker-compose-plugin
 
# Install Drivers
# For Nvidia you will need the nvidia container runtime package installed. Follow the steps here: https://github.com/NVIDIA/nvidia-docker
# CentOS Nvidia Runtime Install

distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | sudo tee /etc/yum.repos.d/nvidia-docker.repo

sudo yum install -y nvidia-container-toolkit
sudo systemctl restart docker
sudo yum install nvidia-container-runtime

# from https://github.com/NVIDIA/nvidia-docker
sudo nvidia-ctk runtime configure
sudo service docker restart
# 

sudo ./install.sh docker/nvidia/centos


sudo mkdir /var/crackq/files/wordlists
sudo mount /dev/sdb1  /var/crackq/files/wordlists  
# edit /etc/fstab to make permanent

# Copy the generic app config into the dest,  generate a new key, and edit.
sudo cp ./crackq.conf /var/crackq/files/
python3 -c 'import secrets; print(secrets.token_urlsafe())'
sudo vi /var/crackq/files/crackq.conf


# Copy the generic ngingx
sudo cp ./cfg/crackq_nginx.conf /var/crackq/files/nginx/

# create key and CSR
cd /var/crackq/files/nginx/conf.d/
sudo openssl req -newkey rsa:2048 -nodes -keyout <NAME>.key -out <name>.csr 

# ls -l
-rw-r--r--. 1 root   root   5706 Jul 14 14:52 certificate.pem
-rw-r--r--. 1 root   root   1033 Jul 14 14:41 crackq-cert.csr
-rw-r--r--. 1 crackq crackq 2121 Jul 12 21:37 crackq_nginx.conf
-rw-------. 1 root   root   1704 Jul 14 14:40 private.pem

# set the server_name
sudo vi /var/crackq/files/nginx/

# CD into the crackq folder

# start interactively once - verify the page loads in a browser and create a SQL-auth user if needed
sudo /usr/libexec/docker/cli-plugins/docker-compose -f docker-compose.nvidia.yml up --build

sudo docker exec -it crackq /usr/bin/python3 /opt/crackq/build/crackq/add_admuser.py

# Start as daemon  
sudo /usr/libexec/docker/cli-plugins/docker-compose -f docker-compose.nvidia.yml up -d

# stop
sudo /usr/libexec/docker/cli-plugins/docker-compose -f docker-compose.nvidia.yml stop


# LDAP authentication setup  - skipped this because the LDAP settings seemed inflexible
# if you want to debug anything, install
sudo yum install openldap-clients



